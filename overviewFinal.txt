OHM Compiler Final Extensions

Alexander Peluso apeluso@udel.edu
Shay Patel patelsap@udel.edu
Arjun Manikyath arjunman@udel.edu



2 Major Extensions


Division Functionality

1) A justification of the extension. Who would benefit from the feature? Why should it be added?

The extension is justified because the user would be able to perform mathematical functions as necessary. Users that need any basic math would benefit. It should be added because it is a fundamental function. 

2) A description of the extension from the view point of a compiler user. How will it work? What will the syntax look like (code examples)? For minor extensions this may be brief; major extensions will require more text. 

From the viewpoint of a compiler user, it will work by adding the syntax itself of the division symbol, as well as addition functionality similar to how addition and subtraction work. The syntax would simply look like ‘/’ with numbers before and after the operator itself. In terms of code, an example would be as follows. 

—-
Var number  = 4 / 6; 
Print(4/6);
—-

The tokenization of terms will not be particular about spaces, as it will only search for numbers around the division operator. It will simply be the slash itself. In terms of the compiler, it will perform the action behind the scenes, however in terms of syntax, it will be the typical operator seen in most languages. 


3) A description of the impacts of the extension on the compiler. What parts of the pipeline will be impacted? How significant will the impacts be? How will it interact with the other extensions you are proposing?

The compiler would be impacted on the basis of fundamental use cases. The pipeline itself wouldn’t be impacted much, the parts impacted would be the same as the other mathematical functions, grouped with addition, subtraction, and multiplication. It will interact with the other extensions being proposed independently, as it is considered part of the mathematical functions but does not require any dependence on any other compiler function. The impacts are significant and yet independent. 

4) A description of how you will judge the success of the extension.

We will judge the success of the extension if any number storable in an integer (as floats aren’t added) are being divided. For example, if every number is accurately divisible, the extension is a success. 


Division Analysis:

The division implementation did not deviate from the original vision in the proposal. It is deemed successful, as all of the testing for it returned no errors that we could find, and all of the division equations returned the correct results. It was implemented in a similar way to how multiplication was already implemented, however, the logic had to be changed to result in division functionality, in that the numbers needed to be divided instead, and the code needed to read in a “/” character. No new classes were added, however, we had to specify a “Factor_Div” rule in the grammar and give it logic in the semantics. The actual usage of the division operator in the language we defined looks slightly different from the proposal; A division operation using our compiler looks something like this:

Var num: Int = 10 / 2;

This assigns the new variable “num” the value of 10/2, which should give it the value of 5. Testing was housed in the test folder, namely with the test file “div_test.txt”, in which division is tested, and when compiled returns the correct answer for the equation 420/10. Additionally, the compilation returns a .wasm file that can be run without error, thus compiling to .ts and .wasm. There are no known problems with division at this time.








Add Char Type

1) A justification of the extension. Who would benefit from the feature? Why should it be added?

This is justified because we are adding what can be considered primitive strings. Users would be able to benefit as it changes the entire functionality of the language from bools and numbers into being able to use words, strings, and sentences. It should be added because it would turn the language into a usable language for more than simply math and logic. 

2) A description of the extension from the view point of a compiler user. How will it work? What will the syntax look like (code examples)? For minor extensions this may be brief; major extensions will require more text. 

The char type from the compiler’s view would be a grouped together version of characters similar to a string. This would be grouped within ‘’ double quotes “”. Anything within these would be considered a string and the text inside does not need to be concatenated. The syntax looks as follows: 

—-
Var sentence  = ‘the dog ran outside’; 
Var sentence2  = “thedogranoutside”; 

Print(“the dog ran outside”);
Print(‘the dog ran outside’);
—-

In terms of lexing, parsing, and syntactical analysis, anything that is grouped within the quotes will be considered belonging to a char. It is very important to note that all chars will be grouped given a fixed amount of memory space which has not been determined yet. They will all be considered the same fixed amount, and will likely start by being a relatively small space. These can be used as simple strings, but will likely not have the byte space to carry massive paragraphs or such. As long as they are grouped within the same segment, any character inside will be considered part of the same char. 



3) A description of the impacts of the extension on the compiler. What parts of the pipeline will be impacted? How significant will the impacts be? How will it interact with the other extensions you are proposing?

The compiler will be impacted as certain fundamentals will be changed, as now tokenization will be much more important. In terms of pipeline, the beginning of the pipeline with variable syntax and more will be impacted, as well as the end of the pipeline where the significant impact is that the new tokenized chars would be interpreted with having any string of characters. It will interact with the variable declarations and syntax of the compiler pipeline, as well as during the tokenization aspect.

4) A description of how you will judge the success of the extension.

The success of the extension will be determined if chars are successfully determined as char types once properly declared. As long as they are properly type checked amongst different test cases. 




Char Analysis:

A description of the extension, including any deviations or refinements from what was submitted as part of your proposal. Discuss any trade offs you made between different design goals, such as between simplicity of code and efficiency of execution.
	This extension adds a new type of strings to the compiler that allows for it to use words.It doesn’t deviate from the proposed plan in any way except for it only accepts alphanumeric values.


A description of the design an implementation of the extension. What parts of the pipeline were impacted? What new classes did you add? What existing classes did you modify? How does the code you wrote interact? Which group members wrote which parts of the code? Basically, your job is to give the course staff enough information that we can understand your program, without needing to look at the source code, and to convince us that you thought carefully about the construction of your extension.
The parts impacted was a map/syntax tree that. There is a value variable that is used to make sure that it is a char type that is checking if the value is a string. It interacts by adding it to the map. It takes in identifier, type, and value. Syntax and code generation are parts of the pipeline that are impacted. All of us worked on the code to make it work.


A description of your testing/validation process. Discuss any interesting issues that arose during the design of your test plan. Why do you have confidence that your test cases have enough coverage of the input space, and enough coverage of your code? Describe the results of carrying out your test plan on your program. Which of your test cases pass, and which fail? If any of your tests fail, be sure to include a discussion of why you think they fail in the known problems section.
We have a multitude of tests for char. One of our tests tests for empty char strings. We also tested to make sure that all instances that would involve char would be covered. We brainstormed as a group to think of cases, such as invalid test cases and valid character test cases. We don’t have any test cases that fail and think we have enough coverage.


A description of any known problems with your specification, design, or implementation. Problems that are clearly identified and described here will be looked upon more favorably than problems that the course staff discovers on its own. Are there bugs in your program? Missing functionality? Incorrect specifications? Incorrect documentation in the code? Let us know.
We do not know of any problems with our implementation, design, or specifications of our extensions. We tried to make as many test cases as we thought possible, but there could be some instances that squeak by.




3 Minor Extensions

Comments

1) A justification of the extension. Who would benefit from the feature? Why should it be added?

Helps with code readability. Every user typing the code to be interpreted by the compiler would benefit. This should be added because it enhances development of the code itself. 

2) A description of the extension from the view point of a compiler user. How will it work? What will the syntax look like (code examples)? For minor extensions this may be brief; major extensions will require more text. 

From a compiler user, this would work by identifying the symbol indicating a comment, in this case being “//”. Once identifying the symbol, all text on the proceeding line will be negated, and essentially ignored. This will work similarly to the char symbol and may use the same system. It will work by putting a ‘//’ and then writing comments after. The syntax looks as follows. 

—-
// add comments here

//anything added after the slashes will be ignored on this line. 
—-
It is very important to note that this syntax and extension (for now) will only be one line comments. In addition, it will work by adding the syntax into the language, and once the symbols are parsed, everything on the line will simply be ignored text. There must be a system to implement this ignoring only on the given line, and not entirely after the slashes. 

3) A description of the impacts of the extension on the compiler. What parts of the pipeline will be impacted? How significant will the impacts be? How will it interact with the other extensions you are proposing?

The impact is quite simple, as only simple syntax would be added to the language to disregard any language after the comment symbol . The only part of the pipeline impacted is language declaration. The impact is quite insignificant, and doesn’t interact with other extensions. 

4) A description of how you will judge the success of the extension.

The success of the extension is dependent if the text after the comment symbol determined is disregarded. Tests will be written to make sure comment code is simply disregarded. 



Comment Analysis:



A description of the extension, including any deviations or refinements from what was submitted as part of your proposal. Discuss any trade offs you made between different design goals, such as between simplicity of code and efficiency of execution.
	There were no deviations or refinements from what was submitted as part of our proposal. The extension is made to help with code readability by letting anyone coding to write down their thought processes to help understand it.


A description of the design an implementation of the extension. What parts of the pipeline were impacted? What new classes did you add? What existing classes did you modify? How does the code you wrote interact? Which group members wrote which parts of the code? Basically, your job is to give the course staff enough information that we can understand your program, without needing to look at the source code, and to convince us that you thought carefully about the construction of your extension.


The impact is quite small for comments, it would only really affect syntax due to anything after it being disregarded by the compiler. The only part of the pipeline impacted is language declaration. A comment is declared by using the slash, which it then returns nothing after it. The way they make the compiler disregard the words after a comment is making it return nothing. Shay and Alex worked on this part of the code.


A description of your testing/validation process. Discuss any interesting issues that arose during the design of your test plan. Why do you have confidence that your test cases have enough coverage of the input space, and enough coverage of your code? Describe the results of carrying out your test plan on your program. Which of your test cases pass, and which fail? If any of your tests fail, be sure to include a discussion of why you think they fail in the known problems section.
We have three test cases involving comments. We feel that it covers enough space because it isn’t too hard of a topic to ensure works. We have test cases that show the words after being disregarded and we felt that was good enough test coverage. 




A description of any known problems with your specification, design, or implementation. Problems that are clearly identified and described here will be looked upon more favorably than problems that the course staff discovers on its own. Are there bugs in your program? Missing functionality? Incorrect specifications? Incorrect documentation in the code? Let us know.

We don’t know of any known problems with comment functionality.




Modulo Operator

1) Justification of the Extension
The extension will be helpful by providing a native modulo operation, which is a fundamental arithmetic operation used in many algorithms and calculations. Those that would benefit include anyone performing arithmetic operations, especially in areas such as cryptography, computer graphics, and any field involving periodic functions or cyclic behavior. Adding this feature will enhance the language's utility and make mathematical expressions more intuitive and concise.

2) Description of the Extension from the Viewpoint of a Compiler User
From the compiler user's perspective, the modulo operation will be integrated seamlessly into the language. The syntax will be straightforward, similar to other arithmetic operations like addition and multiplication. Here’s what the syntax might look like:

Var a: Int = 10 % 3; // a is 1
Var b: Int = 25 % 7; // b is 4

In this example, the modulo operator % will be used to find the remainder of the division of two numbers. The compiler will tokenize the % symbol during lexing and parse it as a binary operator in the parsing stage.

3) Description of the Impacts on the Compiler
The addition of the modulo operation will impact the following parts of the compiler pipeline:

Lexical Analysis: The lexer needs to recognize % as a valid token for the modulo operation.
Parsing: The parser must include rules to handle the modulo operation, ensuring it correctly parses expressions involving %.
Semantic Analysis: The semantic analyzer must verify that the operands of the modulo operation are of compatible types (e.g., integers or compatible numeric types).
Code Generation: The code generator must produce appropriate machine code or intermediate code to perform the modulo operation on the target architecture.
The impacts are significant but manageable, as they primarily involve extending existing arithmetic operation handling mechanisms. This extension should not interfere with other compiler extensions, assuming no conflicting modifications to arithmetic expression handling.

4) Judging the Success of the Extension
Success will be judged based on the following criteria:

Correctness: Test cases involving modulo operations should produce the correct results for a variety of input values, including positive, negative, and zero operands.
Compatibility: The extension should work seamlessly with existing features of the language and should not cause any regressions in other parts of the compiler.
Usability: The syntax and behavior of the modulo operation should be intuitive and consistent with user expectations.



Modulo Analysis:

 
A description of the extension, including any deviations or refinements from what was submitted as part of your proposal. Discuss any trade offs you made between different design goals, such as between simplicity of code and efficiency of execution.
	There are no known deviations from what was submitted as our proposal. The extension adds the modulo functionality found in most popular languages today. It is useful for people who want to find remainders from numbers.


A description of the design an implementation of the extension. What parts of the pipeline were impacted? What new classes did you add? What existing classes did you modify? How does the code you wrote interact? Which group members wrote which parts of the code? Basically, your job is to give the course staff enough information that we can understand your program, without needing to look at the source code, and to convince us that you thought carefully about the construction of your extension.
Lexical analysis, parsing, semantic analysis, code generation were all pipelines impacted by this extension. The code interacts via checking if two values are integers, it returns the values remainder by using the factor and unary functions. For example, it is written like factor.eval() % unary.eval() while using an else condition that throws an error if the previous line doesn’t return an integer value. Alex wrote most of this part of the code with some help from Arjun.  


A description of your testing/validation process. Discuss any interesting issues that arose during the design of your test plan. Why do you have confidence that your test cases have enough coverage of the input space, and enough coverage of your code? Describe the results of carrying out your test plan on your program. Which of your test cases pass, and which fail? If any of your tests fail, be sure to include a discussion of why you think they fail in the known problems section.
A part of our validation process is a else loop in the actual code that throws an error if the numbers prove to be an invalid modulo. We also have tests to prove that the code works as expected to. We have a test that modulo’s two numbers and returns a passing test case if it returns the correct remainder. For example, 42 % 1 should return 0 and that test passes our test case. We do not have a test for a failure of modulo working. We do not have any test cases that fail for modulo.


A description of any known problems with your specification, design, or implementation. Problems that are clearly identified and described here will be looked upon more favorably than problems that the course staff discovers on its own. Are there bugs in your program? Missing functionality? Incorrect specifications? Incorrect documentation in the code? Let us know.

Our only known problem is maybe a lack of sufficient test cases for it.




Truthiness

1) A justification of the extension. Who would benefit from the feature? Why should it be added?

The justification is that the equivalence of true/false to 1/0 would be beneficial in the cohesion of the language itself. If these boolean expressions had numerical values, anyone using booleans would benefit. It should be added to enhance the fundamental logic of the language and compiler. 


2) A description of the extension from the view point of a compiler user. How will it work? What will the syntax look like (code examples)? For minor extensions this may be brief; major extensions will require more text. 

The extension will widely be 2 things- defining 1 and 0 and associating them with true/false, as well as being able to use the numerical value with expressions. This will start with language declaration, as it must be explicitly stated that true is 1 and false is 0. In addition, when lexed and parsed, it will be important to change backend code to associate the actions that have to do with true/false operations with the according values 1 and 0. 

—-
emptyList ([]) = false
emptyNumber () = false
emptyVarOfAnyType () = false
// false has numerical equivalence of 0. 
—-

Not all truthiness will be included. Generally speaking, because anything with any value has some level of truthiness, any value associated with false will be 0, and anything with 1 will be true given basic parameters. This will be more finely flushed out in grammatical definitions when written in. 

3) A description of the impacts of the extension on the compiler. What parts of the pipeline will be impacted? How significant will the impacts be? How will it interact with the other extensions you are proposing?

The compiler is impacted only in the sense of the language definitions and lexing. The language must be defined to have numerical values alongside association of booleans. The impacts are insignificant. It will only interact with the extensions that involve boolean logic, which is only conditionals and variable declarations. 

4) A description of how you will judge the success of the extension.

We will judge the success of the extension if boolean expressions and problems are evaluated and equated to numbers. This will require extensive testing. 



Truthiness Analysis:

Truthiness gives our compiler the functionality to determine that, on top of the literal bool values of TRUE and FALSE, the number 0 can be read as a FALSE signal, while any other value passed is read as TRUE. This expands our compiler’s compatibility with other languages and translations of code, as well as making coding more versatile in our grammar. This was achieved with a simple helper function called “isTruthy” in which the number 0 and the literal value “FALSE” are evaluated as not TRUE. Then, we modified the semantic code of our if and if_else statements to use this helper function when determining if a value passed in should be read as truthy or falsy. An example of this working in our code would look like this:

Var num: Int = 0;
if(0) {
	Put num = 99;
}
Else {
	Put num = 42;
}

This code will assign the value 42 to the variable “num”, since 0 is read by the if statement as a falsy value. Testing was conducted with test files like shown above, and no known issues were found, being as the functionality works as we intended.
